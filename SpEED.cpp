/*
 * SpEED.cpp
 *
 * ***********************************************************************
 * SpEED
 * SpEED is a program for fast computation of sensitive spaced seed.
 * Copyright (C) 2011 Lucian Ilie, Silvana Ilie, Anahita Mansouri Bigvand
 * Download the SpEED source code and binaries on the following web page
 * http://www.csd.uwo.ca/~ilie/SpEED/
 * For information and bug reports, please contact ilie@csd.uwo.ca.
 * ***********************************************************************
 */
	#include <stdlib.h>
	#include <stdio.h>
	#include <iostream>
	#include <string.h>
	#include <math.h>
	#include <fstream>
	#include <time.h>
using namespace std;


int* l;						// Seeds lengths
int k; 						// Number of seeds
int N;						// Length of the random region R
double p;					// Similarity level
int w;						// Weight


/*
 * Precomputed arrays:
 * seedLength_min_k2L, seedLength_min_k3L, seedLength_min_k4L, seedLength_min_k10L are the precomputed arrays for minimum
 * length of the seeds for low similarities (p < 0.85).
 * seedLength_max_k2L, seedLength_max_k3L, seedLength_max_k4L, seedLength_max_k10L are the precomputed arrays for maximum
 * length of low similarities (p < 0.85)
 * seedLength_min_k2H, seedLength_min_k3H, seedLength_min_k4H, seedLength_min_k10H are the precomputed arrays for minimum
 * length of the seeds for high similarities (p >= 0.85).
 * seedLength_max_k2H, seedLength_max_k3H, seedLength_max_k4H, seedLength_max_k10H are the precomputed arrays for maximum
 * length of the seeds for high similarities (p >= 0.85)
 */
int seedLength_min_k2L[13][66] = {
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15},
 {13,  13,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  19,  19,  19,  19},
 {16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20},
 {18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21},
 {19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  24},
 {19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26},
 {19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27},
 {20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27},
 {21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29},
 {22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  31,  31,  32,  32},
 {23,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  33,  34},
 {25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};

int seedLength_min_k3L[13][66] = {
 {12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  16,  16,  16,  16},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
 {15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21},
 {16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23},
 {17,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23},
 {19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
 {20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25},
 {21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28},
 {22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29},
 {22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30},
 {23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  31},
 {24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};

int seedLength_min_k4L[13][66] = {
{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14},
{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17},
{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19},
{15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20},
{16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20},
{17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21},
{18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22},
{19,  19,  19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24},
{20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25},
{21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  26,  26,  26,  26,  26,  26,  26},
{22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27},
{23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28},
{24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30},
};

int seedLength_min_k10L[13][66] = {
 {12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13},
 {14,  14,  14,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  13},
 {15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15},
 {15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17},
 {16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  19,  19},
 {17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  20,  20,  20},
 {18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21},
 {19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
 {20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22},
 {21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23},
 {23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25,  25},
 {24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  26},
 {24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
};

int seedLength_max_k2L[13][66] = {
 {18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23},
 {18,  17,  17,  17,  17,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  19,  19,  19,  20,  20,  20,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  26,  26,  26,  26,  26,  26},
 {19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28},
 {21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30},
 {23,  23,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31},
 {24,  24,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32},
 {24,  24,  25,  25,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33},
 {24,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  36,  36},
 {25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  37,  37,  38,  38,  39,  39},
 {27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  40,  40},
 {28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40},
 {28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40},
 {27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41},
};

int seedLength_max_k3L[13][66] = {
 { 22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28},
 {22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  26,  26,  26},
 {22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
 {22,  23,  23,  24,  24,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29},
 {23,  24,  25,  25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  30,  30,  30,  30,  30,  30,  30,  30,  30,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  31,  31,  32,  32},
 {25,  25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  34},
 {26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  37,  37},
 {27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  39,  39,  39,  40},
 {27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  42,  42},
 {27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43},
 {28,  28,  29,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  33,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43},
 {29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  44,  44,  44},
 {30,  31,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  45,  45,  45,  45,  46,  46},
};

int seedLength_max_k4L[13][66] = {
 {23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
 {22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  30},
 {23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34},
 {24,  25,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35},
 {25,  26,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  36},
 {25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  37,  37,  37},
 {26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39},
 {27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40},
 {28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40,  41,  41},
 {28,  28,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42},
 {27,  28,  28,  29,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43},
 {27,  27,  28,  28,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46,  46,  45,  45,  45,  44},
 { 28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  43,  44,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46},
};

int seedLength_max_k10L[13][66] = {
 {22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32},
 {23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33},
 {23,  24,  24,  25,  26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34},
 {23,  24,  25,  26,  26,  27,  27,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  35,  35},
 {24,  25,  25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  35,  35,  36,  36},
 {25,  26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  37,  37},
 {26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38},
 {27,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39},
 {27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  40,  40,  40,  40},
 {27,  27,  28,  28,  29,  29,  30,  30,  31,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  42,  42,  42,  42,  42,  42,  42,  42,  42,  41,  41,  41},
 {27,  27,  28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42},
 {28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43,  43,  43,  43},
 {29,  30,  30,  31,  31,  32,  32,  33,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43},
};

int seedLength_min_k2H[13][66] = {
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15},
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  19,  19,  19,  19},
 {16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20},
 {18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
 {19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24},
 {19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26},
 {20,  20,  21,  21,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  27},
 {21,  21,  22,  22,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27},
 {22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29},
 {22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32},
 {23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34},
 {25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32},
};

int seedLength_min_k3H[13][66] = {
 {12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16},
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
 {15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19},
 {16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20},
 {18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
 {20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
 {21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25},
 {22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  27,  27},
 {22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28},
 {22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28},
 {22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  30,  30,  30,  29,  29},
 {24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};

int seedLength_min_k4H[13][66] = {
 {12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14},
 {13,  13,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17},
 {16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  17},
 {17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18},
 {17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20},
 {18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22},
 {19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  24},
 {21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25},
 {22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26},
 {22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27,  27,  27,  27,  27},
 {23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28,  28},
 {24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29},
};

int seedLength_min_k10H[13][66] = {
 {12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12},
 {13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14},
 {14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15},
 {15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
 {16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17},
 {17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19},
 {18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21},
 {19,  19,  19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22},
 {20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22},
 {21,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23},
 {23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  25,  25},
 {24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  27},
 {24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
};

int seedLength_max_k2H[13][66] = {
 {18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
 {19,  19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27},
 {20,  20,  20,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29},
 {21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  30,  30,  30},
 {23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31},
 {25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32},
 {26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33},
 {27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  36,  36},
 {27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  39,  39},
 {27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40},
 {28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  40,  40,  40},
 {29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42,  42,  41,  41,  41,  40},
 {29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
};

int seedLength_max_k3H[13][66] = {
 {22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25},
 {22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
 {23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29},
 {25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31},
 {26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33},
 {27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35},
 {27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37},
 {28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  38,  38,  39,  39,  40},
 {28,  29,  29,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  41,  41,  42},
 {28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  43,  43,  43},
 {28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44},
 {28,  29,  30,  30,  31,  32,  32,  33,  34,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  43,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  45,  45,  45,  45},
 {30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46},
};

int seedLength_max_k4H[13][66] = {
 {23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25,  25,  25,  24,  24,  24,  23,  23},
 {25,  25,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31},
 {26,  26,  26,  26,  26,  26,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32},
 {26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31},
 {26,  27,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31},
 {26,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35},
 {26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39},
 {27,  28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41},
 {28,  29,  29,  30,  31,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41},
 {29,  29,  30,  31,  32,  32,  33,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42},
 {29,  30,  31,  31,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
 {29,  30,  31,  31,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45},
 {30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46},
};

int seedLength_max_k10H[13][66] = {
 {24,  24,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  29,  29,  29,  29,  28,  28},
 {25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32},
 {25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  34,  34},
 {25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  35,  35},
 {26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  35,  35,  36,  36},
 {27,  27,  28,  29,  29,  30,  31,  31,  31,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  35,  35,  36,  36,  37},
 {27,  28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  34,  34,  34,  34,  34,  34,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  35,  35,  35,  36,  37,  37,  38},
 {27,  28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  39,  39},
 {27,  28,  29,  29,  30,  31,  31,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40},
 {28,  29,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  41,  41,  41,  41,  41},
 {29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42,  42,  42,  42,  42},
 {30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
 {29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
};

void FLIP(char* s, int pos) //flips 1<->* at pos in a seed s
{
       s[pos] = (s[pos] == '1') ? '0' : '1'; return;
}
/**
 * Compute the power function or base^exp.
 * This function was implemented because it was more efficient than pow function.
 */
int INT_POWER(int base,int exp){
	int prod = 1;
	while (exp--){
		prod *= base;
	}
	return prod;
}

void FLIP(char* s, int pos1, int pos2) //flips 1<->* at pos in seed s
{ FLIP(s, pos1); FLIP(s, pos2);  return; }

void FLIP(char* s, int pos1, int pos2, int pos3, int pos4) //flips 1<->* at pos in seed s
{ FLIP(s, pos1, pos2); FLIP(s, pos3, pos4); return; }

double TWO_SEED_OVERLAPS(char* s1, char* s2) //compute the number of overlaps between seed s1 and seed s2
{
   double overlaps = 0;
       int one_pairs = 0, shift=0, i=0, l1=0, l2=0, one_star_pairs=0, star_star_pairs=0;
       l1 = strlen(s1);
       l2 = strlen(s2);
       int s1_ones = 0, s2_ones = 0;
       for (int i=0;i<l1;i++)
    	   if (s1[i] == '1')
    		   s1_ones++;
       for (int i=0;i<l2;i++)
           	   if (s2[i] == '1')
           		   s2_ones++;
       for (shift = 1-l2; shift <= l1-1; shift++)      {
               one_pairs = 0;one_star_pairs = 0;star_star_pairs = 0;
               for (i = (shift > 0) ? shift : 0; i<=((l2+shift-1 < l1-1) ? l2+shift-1 : l1-1); i++){
                       if ((s1[i] == '1') && (s2[i-shift] == '1')) one_pairs++;
               }
               one_star_pairs = (s1_ones-one_pairs)+(s2_ones-one_pairs);
               star_star_pairs = l1+2*l2-2-one_pairs-one_star_pairs;
                overlaps += INT_POWER(2,one_pairs);
       }
       return(overlaps);

}
/**
 * Prints an array (used for printing seeds)
 */
void printArray2(char** array,int length){
			for (int i=0;i<length;i++){
				cout<<array[i]<<endl;
			}
			cout<<endl;
	}
double MULTIPLE_SWAP1_OVERLAPS(char** SEEDS, int NO_SEEDS)                //swaps 1-*to improve overlaps of "seeds"
{                                                                                       //until no longer possible; returns the overlaps obtained
       double best_overlaps = 0, cur_overlaps = 0, old_overlaps = 0;
       int found_swap=0, cur_seed=0, best_i=0, best_j=0,
	   best_seed=0, k=0, no_swaps=0, weight=0;

       weight = w;

       double** OM = new double* [NO_SEEDS];
       //printArray2(SEEDS,NO_SEEDS);
       for (int i=0; i<=NO_SEEDS-1; i++) {
               OM[i] = new double[NO_SEEDS];             //overlap_matrix OM[i][j] =TWO_SEED_OVERLAPS(SEEDS[i], SEEDS[j])
               for (int j=0; j<=NO_SEEDS-1; j++)
                       OM[i][j]=0;
       }

       for (int i=0; i<=NO_SEEDS-1; i++)
               for (int j=i; j<=NO_SEEDS-1; j++) {
                       OM[i][j] = TWO_SEED_OVERLAPS(SEEDS[i], SEEDS[j]);
                       best_overlaps += OM[i][j];
               }
       cur_overlaps = old_overlaps = best_overlaps;

       do{
               found_swap = 0;
               for(cur_seed=0; cur_seed<=NO_SEEDS-1; cur_seed++) {
                       for(unsigned int i=1; i<=strlen(SEEDS[cur_seed])-2; i++)
                               for(unsigned int j=i+1; j<=strlen(SEEDS[cur_seed])-2; j++)
                                       if((SEEDS[cur_seed][i] == '1' && SEEDS[cur_seed][j] == '0')
                                               || (SEEDS[cur_seed][j] == '1' && SEEDS[cur_seed][i] == '0')) {
                                                       //flip and compute overlaps
                                                       FLIP(SEEDS[cur_seed], i, j);
                                                       old_overlaps = cur_overlaps;
                                                       for (k=0; k<=NO_SEEDS-1; k++) {
                                                               if (k<=cur_seed) cur_overlaps -= OM[k][cur_seed];
                                                               else cur_overlaps -= OM[cur_seed][k];
                                                               cur_overlaps += TWO_SEED_OVERLAPS(SEEDS[cur_seed], SEEDS[k]);
                                                       }

                                                       if (cur_overlaps < best_overlaps) {
															   best_seed = cur_seed;
                                                               best_i = i;
                                                               best_j = j;
                                                               best_overlaps = cur_overlaps;
                                                               found_swap = 1;

                                                       }
                                                       // restore
                                                       FLIP(SEEDS[cur_seed], i, j);
                                                       cur_overlaps = old_overlaps;
                                               }
               }
       if (found_swap == 1) {
                       no_swaps++;
                       if (no_swaps >= weight * NO_SEEDS) found_swap = 0; // enough swaps
                       //change seeds
                       FLIP(SEEDS[best_seed], best_i, best_j);
                       //update overlap matrix OM
                       for (k=0; k<=NO_SEEDS-1; k++)
                               if (k<=best_seed) OM[k][best_seed] = TWO_SEED_OVERLAPS(SEEDS[best_seed], SEEDS[k]);
                               else OM[best_seed][k] = TWO_SEED_OVERLAPS(SEEDS[best_seed], SEEDS[k]);
                       old_overlaps = cur_overlaps = best_overlaps;
               }//printArray2(SEEDS,NO_SEEDS);
       } while(found_swap == 1);
       //printArray2(SEEDS,NO_SEEDS);
       return(best_overlaps);
}

inline long long BIN_REVERSED_TO_INT2 (char *s)		// converts the reversed of the binary string s into integer
{										// works also with * instead of 0
	long long val=0;
	long long l = strlen(s), i=0, temp=1;
	for(i=0; i<=l-1; i++)
	{
		if (s[i] == '1') val += temp;
		temp *= 2;
	}
	return(val);
}
/**
 * Computing sensitivity of a set of SEEDS with the given parameters
 * using the dynamic programming of (Li et al., 2004)
 */
double MULTIPLE_SENSITIVITY2(char** SEEDS, int NO_SEEDS, long long N, double P)
{
	long long i=0, j=0, b=0, pos=0, MAX_L=0, level=0, prev_level_start=0, prev_level_end=0, compatible=0,
		hit=0, suffix_link=0, zero_link=0, new_i=0, tmp=0;
	long long b_zero=0, b_one=0;
	double f0=0, f1=0;
// compute the lengths of the seeds and MAX_L = the length of the longest seed

	long long* seed_length = new long long [NO_SEEDS];
	for (i=0; i<=NO_SEEDS-1; i++) {
		seed_length[i] = strlen(SEEDS[i]);
		if (MAX_L < seed_length[i]) MAX_L = seed_length[i];
	}
// compute the integer values of the reversed seeds INTeger REVersed SEEDS

	long long* INT_REV_SEEDS = new long long[NO_SEEDS];
	for (i=0; i<=NO_SEEDS-1; i++)
		INT_REV_SEEDS[i] = BIN_REVERSED_TO_INT2(SEEDS[i]); // !!! this works like * = 0

// create the tree of BS --- 1..NO_BS-1 *********************************************************
// BS[i][0] = the integer value of b^r (except for epsilon, any b starts with 1)
// BS[i][1] = index j in BS of left son: BS[j][0] = integer value of b^r0 = (0b)^r (-1 if it doesn't exist)
// BS[i][2] = index j in BS of right son: BS[j][0] = integer value of b^r1 = (1b)^r (-1 if it doesn't exist)
// BS[i][3] = (suffix link) index j in BS of (B(b^r))^r i.e. BS[j][0] = integer value of (B(b^r))^r
// BS[i][4] = 1 if b is a hit and 0 otherwise			//B(x) is the longest prefix of x that is in B
														//B = set of compatible but not hits b's
// BS[i][5] = its level = the length of the string
// BS[i][6] = the longest prefix of 0b which reversed means the longest suffix followed by a 0

	long long MAX_NO_BS = NO_SEEDS;
	for (i=0; i<=NO_SEEDS-1; i++) {		// compute maximum possible no of b's
		tmp = 1;
		for (j=strlen(SEEDS[i])-1; j>=0; j--) {
			if (SEEDS[i][j] != '1') tmp *= 2;
			MAX_NO_BS += tmp;        // add previous value if 1 in seed or double (tmp *= 2 above) if a * in seed
		}
	}
	long long NO_BS = MAX_NO_BS;

	//bound for computing sensitivity (not allocate more than 120GB)

	long long **BS = new long long *[NO_BS];

	for (i=0; i<=NO_BS-1; i++)	{
		BS[i] = new long long [7];
        BS[i][0] = BS[i][3] = BS[i][4] = BS[i][5] = BS[i][6] = 0; // initialize
		BS[i][1] = BS[i][2] = -1;
	}
// create the tree by levels: all b's of length i are on level i
	BS[0][0] = 0; //epsilon
	BS[0][1] = -1; //no left son since b=0 is not compatible -- seeds end with 1
	BS[0][2] = 1; //right son is BS[1][0] = 1
	BS[0][3] = 0; //suffix link to itself
	BS[0][4] = 0; //epsilon is not hit
	BS[0][5] = 0;
	BS[0][6] = 0;
	BS[1][0] = 1;
	BS[1][3] = 0;
	BS[1][4] = 0; // assume 1 is not a hit
	BS[1][5] = 1;
	prev_level_start = 1; prev_level_end = 1; // indices in BS between which previous level is found
	pos = 2; //first empty position in BS
	for (level=2; level<=MAX_L; level++) { // complete level "level"
		for (i = prev_level_start; i <= prev_level_end; i++)
			if (BS[i][4] != 1) { // not a hit
				b = BS[i][0]; //integer value
				b_zero = 2 * b; // try b0
				compatible = 0; hit = 0;
				for (j=0; j<=NO_SEEDS-1; j++) 	// check long enough seeds to seee if b0 is compat/hit
					if (seed_length[j] >= level)
						if (((INT_REV_SEEDS[j] >> (seed_length[j] - level)) & (~b_zero)) == 0 ) {
							compatible = 1;
							if (level == seed_length[j])
								hit = 1;
						}
				if (compatible) {
					BS[i][1] = pos;
                    BS[pos][0] = 2 * b;
					BS[pos][4] = hit; // hit = 1 if it is hit by a seed
					BS[pos][5] = level;
					suffix_link = BS[i][3];
					while ((suffix_link != 0) && (BS[suffix_link][1] == -1)) {
						suffix_link = BS[suffix_link][3];
					}
					if (suffix_link != 0) {
						BS[pos][3] = BS[suffix_link][1];
						if (BS[BS[pos][3]][4] == 1)		// if suffix link is hit then also itself is hit
							BS[pos][4] = 1;
					}
					pos++;
				}
				b_one = 2 * b + 1; // try b1
				compatible = 0; hit = 0;
				for (j=0; j<=NO_SEEDS-1; j++) 	// check all long enough seed to seee if b0 is compat/hit
					if (seed_length[j] >= level)
						if (((INT_REV_SEEDS[j] >> (seed_length[j] - level)) & (~b_one)) == 0 ) {
							compatible = 1;
							if (level == seed_length[j])
								hit = 1;
						}
				if (compatible) {
					BS[i][2] = pos;
					BS[pos][0] = 2 * b + 1;
					BS[pos][4] = hit; // hit = 1 if it is hit by a seed
					BS[pos][5] = level;
					suffix_link = BS[i][3];
					while (BS[suffix_link][2] == -1) {
						suffix_link = BS[suffix_link][3];
					}
					BS[pos][3] = BS[suffix_link][2];
					if (BS[BS[pos][3]][4] == 1)		// if suffix link is hit then also itself is hit
						BS[pos][4] = 1;

					pos++;
				}
			}
			prev_level_start = prev_level_end+1;
			prev_level_end = pos - 1;
	}
// zero_links -- longest suffix of b0 in the tree
	for (i=1; i<=NO_BS-1; i++)
		if (BS[i][1] != -1)		// has left son, that is, 0-son
			BS[i][6] = BS[i][1];
		else {
			zero_link = BS[i][3];
			while ((zero_link != 0) && (BS[zero_link][1] == -1)) {
				zero_link = BS[zero_link][3];
			}
			if (zero_link != 0)
				BS[i][6] = BS[zero_link][1];
		}
// compute the f's  f[i][j] = probab to hit a prefix of length i that ends with INT_TO_BIN_REVERSED[BS[j][0]]
	double **f;
	f = new double* [N+1];
	for (i=0; i<=N; i++) {
		f[i] = new double [NO_BS];
		for (j=0; j<=NO_BS-1; j++) f[i][j] = 0; //initialize
	}


	for (i=0; i<=N; i++) {
		for (j=NO_BS-1; j>=0; j--) {
			if (i==0) f[i][j] = 0;					// empty prefix of random region cannot be hit
			else if (i < BS[j][5]) f[i][j] = 0;		// too short
			else if (BS[j][4] == 1) f[i][j] = 1;	// hit
			else {
				new_i = i - BS[j][5] + BS[BS[j][6]][5] - 1;
				if (new_i < 0) new_i = 0;
				f0 = f[ new_i ][ BS[j][6] ];
				if (BS[j][2] < 0)
					f1 = 1;
				else
					f1 = f[ i ][ BS[j][2] ];
				f[i][j] = (1-P)*f0 + P*f1;
			}
		}
	}
	double result = f[N][0];
// free memory
	delete[] seed_length; delete[] INT_REV_SEEDS;
	for (i=0; i<=N; i++)
		delete[] f[i];
	delete[] f;
	for (i=0; i<=MAX_NO_BS-1; i++)
		delete[] BS[i];
	delete[] BS;

	return(result);
}
/**
 * Allocates and initializes the seeds and then applies OC measure in order to find the locally best set
 */
void ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(int w, int* l, char** OPT_SEEDS, int NO_SEEDS)
{
		int i=0, j=0;
       //initialize the seeds with 1**..*11..1
		for (i=0; i<=NO_SEEDS-1; i++) {
			 OPT_SEEDS[i][0] = '1';
			 for (j=1; j<=l[i]-w; j++) OPT_SEEDS[i][j] = '0';
               for (j=l[i]-w+1; j<=l[i]-1; j++) OPT_SEEDS[i][j] = '1';

               OPT_SEEDS[i][l[i]] = '\0';
       }


		char* s = new char[strlen(OPT_SEEDS[NO_SEEDS-1])+1];

		for (int i=0;i<l[NO_SEEDS-1];i++){
			s[i] = OPT_SEEDS[NO_SEEDS-1][i];
		}
		s[l[NO_SEEDS-1]]='\0';
		strcpy(OPT_SEEDS[NO_SEEDS-1],s);
		MULTIPLE_SWAP1_OVERLAPS(OPT_SEEDS,NO_SEEDS);
}
int compare (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}
/**
 * Heuristic algorithm for generating lengths of the seeds given minimum length m and maximum length M
 */
void MAKE_L(int m, int M){
	int* cnt = new int[100]; //cnt has the number of each l[i]
	for (int i=0;i<100;i++){
		cnt[i] = 0;
	}
	int temp = M;

	l[0] = m; l[k-1] = M;

	cnt [l[0]] = 1; cnt[l[k-1]] = 1;

	bool isReachedToEnd = false;
	for(int i = 1;i < k-1;i++){
		if(!isReachedToEnd){
			l[i] = (int)ceil((double)(l[i-1]+M)/2.0);
		}
		else{
			l[i] = temp;
		}

		if (cnt[l[i]] < (int)ceil((double)(k)/(pow(2.0,M-l[i]+1)))){

			cnt[l[i]] = cnt[l[i]]+1;
		}
		else if (cnt[l[i]] == (int)ceil((double)(k)/(pow(2.0,M-l[i]+1)))){

			isReachedToEnd = true;

			l[i] = l[i]-1;

			temp = l[i];
			cnt[l[i]] = cnt[l[i]]+1;
		}
		else{
				isReachedToEnd = true;

			cnt[l[i]] = cnt[l[i]]+1;
		}
	}qsort(l, k, sizeof (int), compare);

}
/**
 * Computes minimum and maximm seed length, m and M, from precomputed arrays or regressed lines
 */
void PRECOMPUTE_MIN_MAX(int& m, int& M){

	if (p < 0.85){ //use 0.8 arrays seedLength_min_kiL and seedLength_max_kiL
		if (k == 2 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k2L[w-10][N-35];
			 M = seedLength_max_k2L[w-10][N-35];
		 }
		 else if (k == 3 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k3L[w-10][N-35];
			 M = seedLength_max_k3L[w-10][N-35];
		 }
		 else if (k == 4 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k4L[w-10][N-35];
			 M = seedLength_max_k4L[w-10][N-35];
		 }
		 else if (k == 10 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k10L[w-10][N-35];
			 M = seedLength_max_k10L[w-10][N-35];
		 }
		 else if (k == 16 && w == 11 && N == 64){
			 m = 14;
			 M = 27;
		 }
		 else{// In the minL and maxL cases the regression line was computed as follows:
			 //  minL regression = -0.8222 - 0.3194k + 1.1497w + 0.0699N
			 // maxL regression  = -0.4858 + 0.4339k + 1.2376w + 0.1586N
			 m = (int)round(-0.8222 - 0.3194*k + 1.1497*w + 0.0699*N);
			 M = (int)round(-0.4858 + 0.4339*k + 1.2376*w + 0.1586*N);
		 }

	}else{ //use 0.9 arrays seedLength_min_kiH and seedLength_max_kiH
		if (k == 2 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k2H[w-10][N-35];
			 M = seedLength_max_k2H[w-10][N-35];
		 }
		 else if (k == 3 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k3H[w-10][N-35];
			 M = seedLength_max_k3H[w-10][N-35];
		 }
		 else if (k == 4 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k4H[w-10][N-35];
			 M = seedLength_max_k4H[w-10][N-35];
		 }
		 else if (k == 10 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			 m = seedLength_min_k10H[w-10][N-35];
			 M = seedLength_max_k10H[w-10][N-35];
		 }
		 else{// In the minH and maxH cases the regression line was computed as follows:
			 //  minH regression =  -0.8101 - 0.3352k + 1.1914w + 0.0581N
			 //  maxH regression  = -1.1686 + 0.3576k + 1.4462w + 0.1366N
			 m =  (int)round(-0.8101 - 0.3352*k + 1.1914*w + 0.0581*N);
			 M =  (int)round(-1.1686 + 0.3576*k + 1.4462*w + 0.1366*N);
		 }
	}
}
/**
 * SpEED-best tries to compute random seeds with random lengths within the interval [min, max+1] that was computed
 * by PRECOMPUTE_MIN_MAX function and then applies OC on those random seeds.
 */
double RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(int m, int M, int weight, int* length, char** seeds, int nSeeds, int tries, int N, double p, double bestSens)
{
	int i=0, j=0, j1=0, k=0, pos=0;
	double curSens = 0;

	srand((unsigned )(time(0)));
	double t[2] = {0, 0};
	t[0] = clock()/ 1000000.0;

	for (k=0; k<tries; k++) { // try "tries" times starting with random seeds and OC them
		// initialize seeds randomly

		for(i = 0;i < nSeeds;i++){
			//the normal range (m,M) ---> (m,M+1) for wider range
			length[i] = rand()%(M-m+1 + 1 < N ? (M-m+1 + 1) : (M-m+1)) + m;
		}

		qsort(length, nSeeds, sizeof (int), compare);

		for (i=0; i<nSeeds; i++) { // ith seed
			for (j=1; j<length[i]-1; j++)
				seeds[i][j] = '0';
			seeds[i][0] = '1';
			seeds[i][length[i]-1] = '1';
			seeds[i][length[i]] = '\0';
			for (j=2; j<weight; j++) {
				pos = rand()%(length[i]-j) + 1;
				j1=0;
				while (pos>0) {
					if (seeds[i][j1] == '0')
						pos--;
					j1++;
				}
				seeds[i][j1-1] = '1';
			}
		}

		// swap
		MULTIPLE_SWAP1_OVERLAPS(seeds, nSeeds);
		curSens = MULTIPLE_SENSITIVITY2(seeds, nSeeds, N, p);
		if (curSens != -1){
			if (curSens > bestSens) {
				bestSens = curSens;

				t[1] = clock()/ 1000000.0;

				cout << "\n --- random try number " << k+1 << " --- " << endl;
				cout << "seeds: " << endl;

				for (i=0; i<nSeeds; i++)
					cout << seeds[i] << endl;
				cout << "sensitivity = " << bestSens << endl;

				cout <<"time (since beginning): "<<t[1]-t[0]<< endl << flush;
				//cout << "sensitivity " << bestSens << endl;
			}
		}
	}

	cout << endl << "Best sensitivity is " << bestSens << endl;

	cout << "Computed in " << t[1]-t[0] << " seconds" << endl << endl;

	return bestSens;
}
/**
 * SpEED first gives its first set by applying Overlap Complexity (OC) measure on the initial seeds.
 * This set is called SpEED-first. Then the program tries to improve the seeds by computing random seeds
 * and applying OC on them.
 */
void SPEED(char** S){

	srand((unsigned )(time(0)));
	double t[2];


	t[0] = clock()/ 1000000.0;

	int m = 0;//min
	int M = 0;//max

	PRECOMPUTE_MIN_MAX(m,M);
	// ensuring that w <= m <= M
	if (m < w) m = w;
	if (M < m) M = m;
	
	cout<<"Generating "<< k << " seeds of weight "<<w<<" for similarity level "<< p 
					<<" and length of homology region "<< N <<endl<<endl;

	if (k == 1){
		m = w+1; // try a wide range of lengths for single seeds
		cout << "The program starts computing ..."<<endl;
		cout << "If you reach a seed with your desired sensitivity you can kill the program ... "<<endl;
		RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(m,M,w,l,S,k,5000,N,p,0);
	}
	else{
		MAKE_L(m,M);

		ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(w, l, S, k);

		t[1] = clock()/ 1000000.0;

		cout << "SpEED-fast seed set is: "<<endl<<endl;

		printArray2(S,k);

		cout << "Computed in "<<t[1]-t[0]<< " seconds" << endl;


		double sensitivity = MULTIPLE_SENSITIVITY2(S, k, N, p);
		cout << "Sensitivity is " << sensitivity << endl<<endl;

		cout << "The program starts computing better seeds ..."<<endl;
		cout << "If you reach a set of seeds with your desired sensitivity you can kill the program ... "<<endl;

		for(int i = 0;i < k;i++){
			S[i] = new char[100];
		}
		RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(m,M,w,l,S,k,5000,N,p,sensitivity);
	}
}

int main(int argc, char **argv) {

	if (argc != 5) {
		cerr << "four arguments required; different number given\n"
		 << "command line should be:\n"
		 << "./SpEED <weight> <numberOfSeeds> <similarity> <lengthOfHomologyRegion>\n";
		exit(1);
	}

	// set parameters

	w = atoi(argv[1]);  // weight
	k = atoi(argv[2]);  // number of seeds
	p = atof(argv[3]);  // similarity
	N = atoi(argv[4]);  // length of homology region
	l = new int[k];				//seeds' lengths array

	char** S = new char* [k];   //set of seeds
	for(int i = 0;i < k;i++)
		S[i] = new char[100];
	
	
	try{
		SPEED(S);
	}catch(std::bad_alloc){
		cerr << "Memory error (Allocation failed)"<<endl
				<<"You probably need more memory to run this program"<<endl;
	}

	return 0;
}

